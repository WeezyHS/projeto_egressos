// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Egresso {
  id              Int     @id @default(autoincrement())
  cpf             String  @unique
  senha           String
  email           String  @unique
  telefone        String
  cidade          String
  estado          String
  pais            String
  fotoPerfil      String?
  linkedin        String?
  instagram       String?
  visivel         Boolean @default(true)

  trabalhoAtual   TrabalhoAtual?
}

model TrabalhoAtual {
  id           Int    @id @default(autoincrement())
  empresa      String
  cidade       String
  estado       String
  pais         String
  cargo        String
  anoEntrada   Int

  egressoId      Int    @unique
  egresso        Egresso  @relation(fields: [egressoId], references: [id])
}

model Instituicao {
  id               Int     @id @default(autoincrement())
  fotoPerfil       String? // Caminho para a imagem ou dados da imagem
  nomeCompleto     String
  cnpj             String  @unique
  telefone         String?
  endereco         String?
  cep              String?
  nomeRepresentante String?
  cpfRepresentante  String?
  email            String @unique
  senha            String
  // Outros campos que você possa ter, como email e senha (se a autenticação for separada)

  @@index([cnpj])
}

model Curso {
  id        Int        @id @default(autoincrement())
  nome      String     @unique
  createdAt DateTime   @default(now())

  matriculas Matricula[]
}

model Pessoa {
  id        Int        @id @default(autoincrement())
  nome      String
  cpf       String     @unique
  email     String     @unique
  createdAt DateTime   @default(now())

  matriculas Matricula[]
}

model Matricula {
  id               Int      @id @default(autoincrement())
  cursoId          Int
  pessoaId         Int
  anoSemestreEntrada String
  anoSemestreSaida   String?

  curso   Curso   @relation(fields: [cursoId], references: [id])
  pessoa  Pessoa  @relation(fields: [pessoaId], references: [id])

  @@unique([cursoId, pessoaId]) // evitar duplicidade de matrícula
}